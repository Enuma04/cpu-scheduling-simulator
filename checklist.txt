// ===== CPU Scheduling Simulator (Week 1: FCFS) =====
// ‚úÖ STEP 1: Define Process struct or class
//     - ID  
//     - Arrival time
//     - Burst time
//     - Waiting time
//     - Turnaround time

// ‚úÖ STEP 2: Generate or input N processes
//     - Random arrival and burst times (or user input)

// ‚úÖ STEP 3: Sort processes by arrival time (FCFS order)

// ‚úÖ STEP 4: Calculate waiting and turnaround times
//     - waitingTime = startTime - arrivalTime
                        pstart + pburst - arrivaltime
//     - turnaroundTime = finishTime - arrivalTime
                        start + burst - arrivalTime

// ‚úÖ STEP 5: Display results
//     - Table format: ID | Arrival | Burst | Waiting | Turnaround

// ‚úÖ STEP 6: Calculate and display average waiting and turnaround times

// BONUS:
// ‚òê Handle edge cases (e.g., multiple processes arriving at the same time)
// ‚òê Allow rerunning the simulation without restarting the program




// ===== Week 2: SJF (Shortest Job First - Non-Preemptive) =====
// ‚úÖ STEP 1: Create a runSJF(Process arr[], int size) function
// ‚úÖ STEP 2: Sort original array by arrival time (if not already sorted)
// ‚úÖ STEP 3: Initialize a scheduled[] array or vector<bool> to track processed tasks

// üîÅ LOOP: While not all processes are scheduled:
//     - Find all processes that have arrived by currentTime and are not yet scheduled
//     - From those, pick the one with the shortest burst time
//     - Set:
//         - start time = max(currentTime, arrivalTime)
//         - finish time = start + burst
//         - waiting time = start - arrival
//         - turnaround time = finish - arrival
//     - Mark process as scheduled
//     - Update currentTime = finish time of scheduled process

// ‚úÖ STEP 4: Display result table:
//     Process | Arrival | Burst | Start | Waiting | Turnaround | Finish

// ‚úÖ STEP 5: Calculate and display average waiting and turnaround time

// OPTIONAL:
// ‚òê Compare with FCFS using same data
// ‚òê Handle ties by picking the earliest arrival time
// ‚òê Show Gantt-style timeline (if time allows)
